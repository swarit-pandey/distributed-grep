// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for JobState.
const (
	CANCELLED  JobState = "CANCELLED"
	COMPLETED  JobState = "COMPLETED"
	FAILED     JobState = "FAILED"
	INPROGRESS JobState = "IN_PROGRESS"
	PENDING    JobState = "PENDING"
)

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`

	// RequestId Original request ID for tracking
	RequestId string `json:"request_id"`
}

// GrepMatch defines model for GrepMatch.
type GrepMatch struct {
	Content string `json:"content"`
	Context *struct {
		After  *[]string `json:"after,omitempty"`
		Before *[]string `json:"before,omitempty"`
	} `json:"context,omitempty"`

	// File Source file where match was found
	File       string `json:"file"`
	LineNumber int    `json:"line_number"`
}

// GrepRequest defines model for GrepRequest.
type GrepRequest struct {
	// CaseSensitive Whether to perform case-sensitive search
	CaseSensitive *bool `json:"case_sensitive,omitempty"`

	// ContextLines Number of context lines before and after match
	ContextLines *int `json:"context_lines,omitempty"`

	// Files Files or patterns to search in
	Files []string `json:"files"`

	// Pattern Grep pattern to search for
	Pattern string `json:"pattern"`

	// Regex Whether to interpret pattern as regex
	Regex *bool `json:"regex,omitempty"`
}

// JobResponse defines model for JobResponse.
type JobResponse struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	JobId     string     `json:"job_id"`

	// RequestId Unique request identifier for tracking
	RequestId string   `json:"request_id"`
	Status    JobState `json:"status"`
}

// JobState defines model for JobState.
type JobState string

// JobStatus defines model for JobStatus.
type JobStatus struct {
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`

	// Error Error message if job failed
	Error      *string `json:"error,omitempty"`
	JobId      string  `json:"job_id"`
	Pagination *struct {
		CurrentPage  *int `json:"current_page,omitempty"`
		PerPage      *int `json:"per_page,omitempty"`
		TotalPages   *int `json:"total_pages,omitempty"`
		TotalResults *int `json:"total_results,omitempty"`
	} `json:"pagination,omitempty"`
	Progress  *int         `json:"progress,omitempty"`
	RequestId string       `json:"request_id"`
	Results   *[]GrepMatch `json:"results,omitempty"`
	Stats     *struct {
		// BytesProcessed Total bytes processed
		BytesProcessed *int `json:"bytes_processed,omitempty"`

		// ProcessedFiles Number of files processed
		ProcessedFiles *int `json:"processed_files,omitempty"`

		// TotalFiles Total number of files to process
		TotalFiles *int `json:"total_files,omitempty"`

		// TotalMatches Total matches found
		TotalMatches *int `json:"total_matches,omitempty"`
	} `json:"stats,omitempty"`
	Status JobState `json:"status"`
}

// GetGrepJobParams defines parameters for GetGrepJob.
type GetGrepJobParams struct {
	// Page Page number for results pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of results per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateGrepJobJSONRequestBody defines body for CreateGrepJob for application/json ContentType.
type CreateGrepJobJSONRequestBody = GrepRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit a new grep job
	// (POST /grep)
	CreateGrepJob(c *gin.Context)
	// Get grep job status and results
	// (GET /grep/{jobId})
	GetGrepJob(c *gin.Context, jobId string, params GetGrepJobParams)
	// Cancel a running grep job
	// (POST /grep/{jobId}/cancel)
	CancelGrepJob(c *gin.Context, jobId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateGrepJob operation middleware
func (siw *ServerInterfaceWrapper) CreateGrepJob(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGrepJob(c)
}

// GetGrepJob operation middleware
func (siw *ServerInterfaceWrapper) GetGrepJob(c *gin.Context) {

	var err error

	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobId", c.Param("jobId"), &jobId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jobId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGrepJobParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGrepJob(c, jobId, params)
}

// CancelGrepJob operation middleware
func (siw *ServerInterfaceWrapper) CancelGrepJob(c *gin.Context) {

	var err error

	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobId", c.Param("jobId"), &jobId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter jobId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CancelGrepJob(c, jobId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/grep", wrapper.CreateGrepJob)
	router.GET(options.BaseURL+"/grep/:jobId", wrapper.GetGrepJob)
	router.POST(options.BaseURL+"/grep/:jobId/cancel", wrapper.CancelGrepJob)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
