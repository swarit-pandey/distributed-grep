openapi: 3.0.0
info:
  title: Distributed Grep Service
  version: 1.0.0
  description: A distributed grep service using MapReduce

servers:
  - url: /api/v1

paths:
  /grep:
    post:
      summary: Submit a new grep job
      operationId: createGrepJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrepRequest'
      responses:
        '202':
          description: Job accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /grep/{jobId}:
    get:
      summary: Get grep job status and results
      operationId: getGrepJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          description: Page number for results pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: Number of results per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Job status and results if available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /grep/{jobId}/cancel:
    post:
      summary: Cancel a running grep job
      operationId: cancelGrepJob
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Job already completed/cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    GrepRequest:
      type: object
      required:
        - pattern
        - files
      properties:
        pattern:
          type: string
          description: Grep pattern to search for
          example: "error.*"
        files:
          type: array
          description: Files or patterns to search in
          items:
            type: string
          minItems: 1
          maxItems: 100
          example: ["logs/*.log", "logs/app.log", "logs/error.log"]
        context_lines:
          type: integer
          description: Number of context lines before and after match
          default: 0
          minimum: 0
          maximum: 10
        case_sensitive:
          type: boolean
          description: Whether to perform case-sensitive search
          default: false
        regex:
          type: boolean
          description: Whether to interpret pattern as regex
          default: true

    JobResponse:
      type: object
      required:
        - job_id
        - request_id
        - status
      properties:
        job_id:
          type: string
          example: "grep_abc123"
        request_id:
          type: string
          description: Unique request identifier for tracking
          example: "req_xyz789"
        status:
          $ref: '#/components/schemas/JobState'
        created_at:
          type: string
          format: date-time

    JobStatus:
      type: object
      required:
        - job_id
        - request_id
        - status
      properties:
        job_id:
          type: string
          example: "grep_abc123"
        request_id:
          type: string
          example: "req_xyz789"
        status:
          $ref: '#/components/schemas/JobState'
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 75
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        stats:
          type: object
          properties:
            total_files:
              type: integer
              description: Total number of files to process
              example: 15
            processed_files:
              type: integer
              description: Number of files processed
              example: 10
            total_matches:
              type: integer
              description: Total matches found
              example: 42
            bytes_processed:
              type: integer
              description: Total bytes processed
              example: 1048576
        results:
          type: array
          items:
            $ref: '#/components/schemas/GrepMatch'
        pagination:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            total_pages:
              type: integer
              example: 5
            total_results:
              type: integer
              example: 237
            per_page:
              type: integer
              example: 50
        error:
          type: string
          description: Error message if job failed
          example: "File not found in storage"

    GrepMatch:
      type: object
      required:
        - file
        - line_number
        - content
      properties:
        file:
          type: string
          description: Source file where match was found
          example: "logs/app.log"
        line_number:
          type: integer
          example: 42
        content:
          type: string
          example: "ERROR: connection timeout"
        context:
          type: object
          properties:
            before:
              type: array
              items:
                type: string
              example: ["Previous log line 1", "Previous log line 2"]
            after:
              type: array
              items:
                type: string
              example: ["Next log line 1", "Next log line 2"]

    JobState:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - CANCELLED
      example: "IN_PROGRESS"

    Error:
      type: object
      required:
        - code
        - message
        - request_id
      properties:
        code:
          type: string
          example: "FILE_NOT_FOUND"
        message:
          type: string
          example: "Specified file not found in storage"
        request_id:
          type: string
          description: Original request ID for tracking
          example: "req_xyz789"
